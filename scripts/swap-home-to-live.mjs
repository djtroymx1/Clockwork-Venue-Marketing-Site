import { readFile, writeFile, cp } from "node:fs/promises";
import { existsSync } from "node:fs";
import fs from "node:fs";
import path from "node:path";

const repo = process.cwd();
const pubs = [
  path.join(repo, "sites", "www", "public"),
  path.join(repo, "public"),
];
const pub = pubs.find((p) => existsSync(p)) || path.join(repo, "public");
const gen = path.join(pub, "_generated", "index.html");
const live = path.join(pub, "index.html");

function ts() {
  const d = new Date();
  const pad = (n) => String(n).padStart(2, "0");
  return (
    d.getFullYear() +
    "" +
    pad(d.getMonth() + 1) +
    "" +
    pad(d.getDate()) +
    "-" +
    pad(d.getHours()) +
    pad(d.getMinutes()) +
    pad(d.getSeconds())
  );
}

(async () => {
  if (!existsSync(gen)) {
    console.error("No generated home:", gen);
    process.exit(1);
  }
  if (!existsSync(live)) {
    console.error("No live home to backup:", live);
    process.exit(1);
  }
  const stamp = ts();
  const backup = path.join(pub, `index.backup-${stamp}.html`);
  const latest = path.join(pub, "index.backup-latest.html");
  await cp(live, backup);
  await cp(live, latest);
  let html = await readFile(gen, "utf8");
  if (!html.includes("AUTOGENERATED FROM /content")) {
    html =
      "<!-- AUTOGENERATED FROM /content via scripts/compose-content.mjs. Edit Markdown, not this file. -->\n" +
      html;
  }
  await writeFile(live, html, "utf8");
  console.log(
    "âœ“ Swapped home.\nLive:",
    live,
    "\nBackup:",
    backup,
    "\nLatest backup alias:",
    latest
  );
})().catch((e) => {
  console.error(e);
  process.exit(1);
});
