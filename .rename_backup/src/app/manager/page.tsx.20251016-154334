
"use client";

import React, { useState, useMemo } from 'react';
import Head from 'next/head';
import { legalConfig } from '@/lib/legal';
import { Header } from '@/components/header';
import { Footer } from '@/components/footer';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { FileText, BarChart2, CreditCard, Settings, Download, Eye, X } from 'lucide-react';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Input } from '@/components/ui/input';
import { useAuth } from '@/hooks/use-auth';
import type { ExportFile } from '@/lib/types';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogClose,
} from '@/components/ui/dialog';
import { useToast } from '@/hooks/use-toast';


// Mock Data - In a real app, this would come from Firestore
const seedData: ExportFile[] = [
  {
    id: 'export-001',
    orgId: 'org-main-club-1',
    type: 'Night Report',
    createdAt: new Date('2025-09-01T04:30:00Z'),
    createdBy: 'system',
    filePath: 'exports/org-main-club-1/test/2025-09-01-rotation.csv',
    rowCount: 1250,
    watermarkApplied: true,
    downloadCount: 2,
    lastDownloadedAt: new Date('2025-09-01T10:15:00Z'),
  },
   {
    id: 'export-002',
    orgId: 'org-main-club-1',
    type: 'Night Report',
    createdAt: new Date('2025-08-31T04:30:00Z'),
    createdBy: 'system',
    filePath: 'exports/org-main-club-1/test/2025-08-31-rotation.csv',
    rowCount: 1198,
    watermarkApplied: true,
    downloadCount: 0,
  },
   {
    id: 'export-003',
    orgId: 'org-main-club-1',
    type: 'Day Report',
    createdAt: new Date('2025-08-31T04:30:00Z'),
    createdBy: 'system',
    filePath: 'exports/org-main-club-1/test/2025-08-31-rotation.csv',
    rowCount: 1198,
    watermarkApplied: true,
    downloadCount: 0,
  },
];

const mockCsvPreviewContent = `Entertainer,Stage,Time,Dances,VIP\n"Tiffany","Main",20:12,3,0\n"Crystal","Side",20:18,2,1\n"Bambi","Main",20:25,4,0`;
const mockCsvWatermark = "Generated by StageFlow™ — stageflowlive.com — Org: org-main-club-1 — 2025-09-01T04:30:00.000Z";


const ComingSoonTab = ({ title, description, action }: { title: string, description: string, action?: React.ReactNode }) => (
    <div className="flex items-center justify-center h-64 border-2 border-dashed rounded-lg bg-card/50">
        <div className="text-center p-8">
            <h2 className="text-2xl font-bold tracking-tight">{title}</h2>
            <p className="text-muted-foreground mt-2">{description}</p>
            {action && <div className="mt-4">{action}</div>}
        </div>
    </div>
);

const ExportsTab = () => {
    const { user } = useAuth();
    const { toast } = useToast();
    const [exports, setExports] = useState<ExportFile[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');
    const [previewFile, setPreviewFile] = useState<ExportFile | null>(null);

    // In a real app, you would use useEffect to fetch from Firestore
    // useEffect(() => {
    //     const fetchExports = async () => {
    //         if (!user) return;
    //         setIsLoading(true);
    //         // Firestore fetch logic here, filtered by user.orgId
    //         // For now, we use seedData
    //         const userExports = seedData.filter(e => e.orgId === user.orgId);
    //         setExports(userExports);
    //         setIsLoading(false);
    //     };
    //     fetchExports();
    // }, [user]);
    
    // Using seedData directly for this example
    React.useEffect(() => {
        if(user) {
            setExports(seedData.filter(e => e.orgId === user.orgId).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime()));
        }
        setIsLoading(false);
    }, [user]);

    const filteredExports = useMemo(() => {
        return exports.filter(exp =>
            exp.type.toLowerCase().includes(searchTerm.toLowerCase()) ||
            exp.filePath.toLowerCase().includes(searchTerm.toLowerCase())
        );
    }, [exports, searchTerm]);

    const handleDownload = (file: ExportFile) => {
      // In a real app, this would:
      // 1. Call Firebase Storage to get a download URL or blob
      // 2. Trigger the browser download
      // 3. On success, update Firestore for downloadCount, lastDownloadedAt, and add to download_logs
      console.log(`Downloading ${file.filePath}...`);
      toast({
        title: "Download Simulated",
        description: `Your download for ${file.filePath} has started.`
      })
    };

    const handlePreview = (file: ExportFile) => {
      setPreviewFile(file);
    };

    if (isLoading) {
        return <p>Loading...</p>;
    }

    return (
        <Card>
            <CardHeader>
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                    <div>
                        <CardTitle>Data Exports</CardTitle>
                        <CardDescription>Browse and download nightly analytics for your club.</CardDescription>
                    </div>
                    <Input 
                        placeholder="Search by type or filename..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="w-full sm:w-64"
                    />
                </div>
            </CardHeader>
            <CardContent>
                {filteredExports.length > 0 ? (
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead>Created</TableHead>
                                <TableHead>Type</TableHead>
                                <TableHead className="text-right">Actions</TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {filteredExports.map((file) => (
                                <TableRow key={file.id}>
                                    <TableCell>{file.createdAt.toLocaleString()}</TableCell>
                                    <TableCell>{file.type}</TableCell>
                                    <TableCell className="text-right space-x-2">
                                        <Button variant="outline" size="sm" onClick={() => handlePreview(file)}>
                                            <Eye className="mr-2 h-4 w-4" /> Preview
                                        </Button>
                                        <Button variant="default" size="sm" onClick={() => handleDownload(file)}>
                                            <Download className="mr-2 h-4 w-4" /> Download
                                        </Button>
                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                ) : (
                    <div className="text-center py-12 text-muted-foreground">
                        <p>No exports match your search.</p>
                        <p className="text-sm">Data exports will appear here automatically after each night.</p>
                    </div>
                )}
            </CardContent>
             {previewFile && (
                <Dialog open={!!previewFile} onOpenChange={(isOpen) => !isOpen && setPreviewFile(null)}>
                    <DialogContent className="max-w-4xl w-full h-[80vh] flex flex-col">
                        <DialogHeader>
                            <DialogTitle>Preview: {previewFile.filePath.split('/').pop()}</DialogTitle>
                             <DialogClose className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2">
                                <X className="h-4 w-4" />
                                <span className="sr-only">Close</span>
                            </DialogClose>
                        </DialogHeader>
                        <div className="flex-grow overflow-auto border rounded-md p-2 text-sm bg-background">
                            <pre className="whitespace-pre-wrap">{mockCsvPreviewContent}</pre>
                        </div>
                        <div className="text-xs text-muted-foreground p-2 border-t mt-2">
                            <strong>Watermark:</strong> {mockCsvWatermark}
                        </div>
                    </DialogContent>
                </Dialog>
            )}
        </Card>
    );
};

export default function ManagerPage() {
  const pageTitle = `Manager • ${legalConfig.brandName}`;
  const pageDescription = "Access exports, reports, billing, and settings for your organization.";

  return (
    <div className="flex flex-col min-h-screen">
       <Head>
            <title>{pageTitle}</title>
            <meta name="description" content={pageDescription} />
            <meta name="robots" content="noindex,nofollow" />
            <meta property="og:title" content={pageTitle} />
            <meta property="og:description" content={pageDescription} />
            <meta name="twitter:title" content={pageTitle} />
            <meta name="twitter:description" content={pageDescription} />
        </Head>
      <Header />
      <main className="flex-grow container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold tracking-tight mb-6">Data Exports and Analysis</h1>
        <Tabs defaultValue="exports" className="w-full">
          <TabsList className="grid w-full grid-cols-2 md:grid-cols-4 max-w-xl">
            <TabsTrigger value="exports"><FileText className="mr-2 h-4 w-4" />Exports</TabsTrigger>
            <TabsTrigger value="reports"><BarChart2 className="mr-2 h-4 w-4" />Reports</TabsTrigger>
            <TabsTrigger value="billing"><CreditCard className="mr-2 h-4 w-4" />Billing</TabsTrigger>
            <TabsTrigger value="settings"><Settings className="mr-2 h-4 w-4" />Settings</TabsTrigger>
          </TabsList>
          <TabsContent value="exports" className="mt-6">
             <ExportsTab />
          </TabsContent>
          <TabsContent value="reports" className="mt-6">
            <ComingSoonTab title="Reports" description="View detailed analytics and performance reports for your organization." />
          </TabsContent>
          <TabsContent value="billing" className="mt-6">
            <ComingSoonTab 
              title="Billing" 
              description="Manage your subscription, view invoices, and update payment methods."
              action={
                <Button variant="outline" disabled>
                   Open Stripe Customer Portal
                </Button>
              }
            />
          </TabsContent>
          <TabsContent value="settings" className="mt-6">
            <ComingSoonTab title="Settings" description="Manage organization details, user roles, and other settings." />
          </TabsContent>
        </Tabs>
      </main>
      <Footer />
    </div>
  );
}
